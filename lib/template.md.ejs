<%- stopText %>

![Photo of white cards by Brandi Redd on Unsplash.com](/readme-assets/header.jpg)

# Cardscript

> An open vocabulary for defining rich user interfaces

## Playpen

The best way to see



## Getting started

#### Get hands-on with Cardscript using the online [Cardscript Playpen](https://wmfs.github.io/cardscript/)!

* For some introductory context around why we developed Cardscript, please see [Appendix A: Cardscript Motivation](#motivation).
* A [JSON Schema (Draft-07)](http://json-schema.org/) for Cardscript is available [here](https://raw.githubusercontent.com/wmfs/cardscript/master/packages/cardscript-schema/lib/schema.json).
* The Cardscript [Lerna](https://lernajs.io/) multi-package repository (developed in the open on [Github](https://github.com/wmfs/cardscript)) provides several utilities to help work with the language. Please see [Appendix B: Cardscript Utilities](#utilities) for further information.

## <a name="toc"></a>Table of Contents

* [Structure of a Card](#structure)
  * [Example: Simple Card](#example)
* [Concepts](#concepts)
  * [Cards](#card)
  * [Apps](#app)
  * [Elements](#element)
    * [Element summary](#element-summary)
  * [Containers](#container)
  * [Expressions](#expression)
* [Reference](#reference)
  * [Top-Level Properties](#top-level)
  * [Element Properties](#properties)
  * [Element Attributes](#attributes)
  * [Element List](#list)
* [License (MIT)](#license)
* [Appendices](#appendices)
  * [Appendix A: Cardscript Motivation](#motivation)
  * [Appendix B: Cardscript Utilities](#utilities)

## <a name="structure"></a>Structure of a Card

__In Cardscript, a _card_ is represented by a [JSON Object](https://tools.ietf.org/html/rfc7159#section-4]).__

### <a name="example"></a>Example: Simple Card

__The content of a [_card_](#card) is specified by configuring one-or-more [_elements_](#element), which are represented by JSON objects.__

* In this example, a card is defined that contains two elements, one that defines a suitable [`Jumbotron`](#list-Jumbotron) (with some text and an accompanying image),
followed by a second [`Input.Text`](#list-Input.Text)-element for letting the user enter their name.

``` json
<%- simpleExample -%>

```

## <a name="concepts"></a>Concepts

__Cardscript is built on a handful of key concepts...__

### <a name="card"></a>Cards

The purpose of Cardscript is to define a user interface, referred to as a "__card__".

<%# TODO * In Cardscript, the term "view" refers to the "V" in [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). Views can relate to traditional forms or used to simply display data to the user (like a dashboard or similar).%>
* With Cardscript it's possible to configure a card with structure, validation, conditional content, dynamic values and context-sensitive behaviours (e.g. operating differently with an internet connection as opposed to without).
* Cardscript definitions are naturally stored in `.json` files (typically one-file-per-view).
* In certain situations [YAML](https://en.wikipedia.org/wiki/YAML) (itself just a superset of JSON) may offer an interesting alternative to serialising Cardscript definitions (the [cardscript-parser](https://github.com/wmfs/cardscript/tree/master/packages/cardscript-parser) utility supports both)..
* Please note that a [JSON Schema](http://json-schema.org/) is available [here](https://raw.githubusercontent.com/wmfs/cardscript/master/packages/cardscript-schema/lib/schema.json), which may be used to validate the basic integrity of Cardscript content.
* For more comprehensive Cardscript validation, please refer to the [cardscript-schema](https://www.npmjs.com/package/cardscript-schema) package.

### <a name="app"></a>Apps

Views defined in Cardscript may be rendered and executed by software.
In this document, such software is referred to an "__app__".

* Apps can be implemented in any frontend-framework, language or library.
* Cardscript does not impose any aesthetic or UI constraints onto apps which implement it.
* Cardscript content can be embedded inside apps with [GUI](https://en.wikipedia.org/wiki/Graphical_user_interface), [CLI](https://en.wikipedia.org/wiki/Graphical_user_interface) and even [Voice-User](https://en.wikipedia.org/wiki/Voice_user_interface) interfaces.
* Please note several utilities are available to help embed Cardscript into apps. Please see [Appendix B: Cardscript Utilities](#utilities) for further information.

### <a name="element"></a>Elements

Cards are constructed from an ordered list of "__elements__".

* To avoid overloading frontend-terms like 'component', Cardscript refers to each object in the `elements` array as an __element__.
* Consider an element as an area of a view responsible for a particular task: either collecting a specific piece of information from a user or visualising some data.
* As such, elements can be interactive ([`Input.Text`](#list-Input.Text), [`Input.Number`](#list-Input.Number), <%#[`map`](#list-map) %>etc.) and non-interactive ([`Jumbotron`](#list-Jumbotron), [`Media`](#list-Media) etc.)
* The order that `Element` objects appear within a view definition is important - representing the order users will encounter them.
* Cardscript is a delightful walled-garden, offering a fixed set of <%= elements.length %> p re-configured elements. If you need another element-type or an extra attribute... [pull requests are very welcome!](https://github.com/wmfs/Cardscript/blob/master/CONTRIBUTING.md) :blush:

__Ahead of the [Reference](#reference) section, here's a quick summary of the <%= elements.length %> elements supported in Cardscript:__

#### <a name="element-summary"></a>Element summary

| Element Type      | Description |
| -----------      | ----------- |
<% elements.forEach(function(element) { -%>
| [`<%= element.type -%>`](#list-<%= element.type -%>) | <%- element.description %> |
<% }) %>

### <a name="container"></a>Containers

All the [elements](#element) that define a [view](#view)'s content are specified in a simple array.
This design helps align Cardscript with vertical-scrolling interfaces with very little friction.
To assist with navigation (especially around larger, more complex content) it might be useful to split a view into more manageable pieces.

* __In Cardscript,  _containers_ allow elements to be grouped into related chunks.__

__Example JSON__

``` json
<%- simpleSetExample -%>

```

* In this example, we are declaring that a [`text`](#list-text) element (with the id `name`) should be rendered within a container (which should appear in a Table of Contents with the heading "_Profile_").
* The beginning of each container is marked with a [`container`](#container) element.
* Nesting of containers is possible and containers are especially powerful when combined with dynamic [expressions](#expression) to conditionally show/hide content.
* Containers also enable apps to offer [progress tracking](https://www.smashingmagazine.com/2010/01/progress-trackers-in-web-design-examples-and-best-design-practices/) functionality.
* Multi-step "wizard" interfaces are also easily achieved via containers.
* The [`CardList`](#CardList) element uses exactly the same technique to define repeating-groups of elements.

### <a name="expression"></a>Expressions

Cardscript uses __expressions__ to deliver dynamic content. Expressions are used to:

* Conditionally show/hide elements depending on values as they change.
* Validate card content based on more complex business rules.
* Affect the contents of enumerated lists.
* Default dynamic values.
* Calculate running totals, real-time summaries etc.

Consider an expression to be something that could be evaluated in a Javascript `if (...) {}` statement.

```json
<%- expressionExample -%>

```

__In the example above we have three elements:__

1. The first element is a simple [`jumbotron`](#jumbotron).
2. The second element is a simple boolean on/off [`Input.Toggle`](#toggle) (with the `id` of `userWantsToGiveFeedback`) which is by default set to `false`.
3. The third element is an [`Input.Text`](#inputText) box (with the `id` of `feedback`) for collecting feedback from the user.

The `feedback` element should only show if the `userWantsToGiveFeedback` toggle is thrown on (i.e. `true`).

There are a few new things going on here.
Most types of element (here the `Toggle` and `Input.Text` types) expect an app to read and write their values to an underlying `data` object (using their respective `id` values as keys).
It is also expected that any app implementing Cardscript should also make this `data` object available within a safe sandbox while evaluating expressions.

In the previous example we can see the `showWhen` attribute is being used on the `feedback` element. The string value here is an _expression_, which will control the visibility of the element (i.e. it should only be shown to the user when the expression evaluates to `true`).

#### <a name="sandbox"></a>Expression sandbox

Apps must ensure expressions are evaluated in a safe sandbox context. As such only certain objects may be referred to within an expression:

| Sandbox object | Description |
| -------------- | ----------- |
| `data`         | The current card data being stored. Should be kept fresh in real-time using UI binding techniques. |
| `env`          | Some environmental information, e.g. the user's name, if the app has access to an internet connection etc. |

##### __`env` object properties__

Apps are expected to provide the following details via an `env` object when evaluating expressions:

| Property         | Type      | Description |
| ---------------- | --------- | ----------- |
| `username`       | `string`  | Username of the the user currently using the form. |
| `startedOffline` | `boolean` | Indicates if the form was started online, or not. |

##  <a name="reference"></a>Reference

<!--### <a name="top-level"></a>Top-Level Properties-->

<!--The top-level object defining a card comprises of several properties:-->

<!--| Property         | Type      | Description | Required?   |-->
<!--| &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; | -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; | -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; | -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; |-->
<!--<% topLevelProperties.forEach(function(topLevelProperty) { -%>-->
<!--| `<%= topLevelProperty.name %>` | `<%= topLevelProperty.type%>` | <%= topLevelProperty.desc %> | `<%= topLevelProperty.required%>` |-->
<!--<% }) %>-->


<!--### <a name="properties"></a>Element Properties-->

<!--Each `element` object comprise of some properties:-->

<!--| Attribute Name | Type | Description |-->
<!--| &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; | -&#45;&#45;&#45;&#45;| -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; |-->
<!--<% properties.forEach(function(property) { -%>-->
<!--| `<%= property.name%>` | `<%= property.type %>` | <%- property.title %> |-->
<!--<% })-%>-->
<!--| `attributes` | `object` | A key/value object for configuring each element - the content of which is dependent on the element's `type`. |-->

### <a name="attributes"></a>Card Elements

Cardscript supports a set of <%= attributes.length %> common attributes from which elements can be configured.
Not one element-type requires all these attributes. Attributes are often optional and some element-types don't need an `attributes` object at all.

| Element Name | Type | Description |
| -------------- | -----| ----------- |
<% attributes.forEach(function(attribute) { -%>
| `<%= attribute.name%>` | `<%= attribute.type %>` | <%- attribute.description %> |
<% }) %>

# <a name="ActionList"></a>Actions

Here is the full list of all <%= actions.length %> actions supported in Cardscript (please see [Element summary](#element-summary) for a handy index).

<% actions.forEach(function(element) { -%>

<hr>

## The <a name="list-<%= element.type -%>"></a>`<%= element.type%>` element

__<%- element.description %>__

__Example JSON__

``` json
<%- element.example %>

```


<% if (element.propertySummary.length > 0 ) { -%>

__Properties__

| Name | Type | Required | Description |
| ---- | -----| -------- | ----------- |
<% element.propertySummary.forEach(function(attrib) { -%>
| `<%= attrib.name -%>` | <%- attrib.type -%> | `<%= attrib.required -%>` | <%- attrib.text -%> |
<% }) %>

<% } %>

<% }) %>

<hr>

# <a name="ContainerList"></a>Containers

Here is the full list of all <%= containers.length %> containers supported in Cardscript (please see [Element summary](#element-summary) for a handy index).

<% containers.forEach(function(element) { -%>

<hr>

## The <a name="list-<%= element.type -%>"></a>`<%= element.type%>` element

__<%- element.description %>__

__Example JSON__

``` json
<%- element.example %>

```


<% if (element.propertySummary.length > 0 ) { -%>

__Properties__

| Name | Type | Required | Description |
| ---- | -----| -------- | ----------- |
<% element.propertySummary.forEach(function(attrib) { -%>
| `<%= attrib.name -%>` | <%- attrib.type -%> | `<%= attrib.required -%>` | <%- attrib.text -%> |
<% }) %>

<% } %>

<% }) %>

<hr>

# <a name="InputList"></a>Inputs

Here is the full list of all <%= inputs.length %> inputs supported in Cardscript (please see [Element summary](#element-summary) for a handy index).

<% inputs.forEach(function(element) { -%>

<hr>

## The <a name="list-<%= element.type -%>"></a>`<%= element.type%>` element

__<%- element.description %>__

__Example JSON__

``` json
<%- element.example %>

```


<% if (element.propertySummary.length > 0 ) { -%>

__Properties__

| Name | Type | Required | Description |
| ---- | -----| -------- | ----------- |
<% element.propertySummary.forEach(function(attrib) { -%>
| `<%= attrib.name -%>` | <%- attrib.type -%> | `<%= attrib.required -%>` | <%- attrib.text -%> |
<% }) %>

<% } %>

<% }) %>

<hr>

# <a name="ElementList"></a>Other Elements

Here is the full list of all <%= elements.length %> other elements supported in Cardscript (please see [Element summary](#element-summary) for a handy index).

<% elements.forEach(function(element) { -%>

<hr>

## The <a name="list-<%= element.type -%>"></a>`<%= element.type%>` element

__<%- element.description %>__

__Example JSON__

``` json
<%- element.example %>

```


<% if (element.propertySummary.length > 0 ) { -%>

__Properties__

| Name | Type | Required | Description |
| ---- | -----| -------- | ----------- |
<% element.propertySummary.forEach(function(attrib) { -%>
| `<%= attrib.name -%>` | <%- attrib.type -%> | `<%= attrib.required -%>` | <%- attrib.text -%> |
<% }) %>

<% } %>

<% }) %>

<hr>



# <a name="license"></a>License (MIT)

The Cardscript specification and related tooling is provided under [__MIT__](https://github.com/wmfs/cardscript/blob/master/LICENSE).

<hr>

# <a name="appendices"></a>Appendices

## <a name="motivation"></a>Appendix A: Cardscript Motivation

__Cardscript is the product of a small in-house development team at [West Midlands Fire Service](http://www.wmfs.net).
Our work over the last 20 years has often involved collecting data from a variety of teams and environments.
During this time, our best experiences have come from taking a declarative approach to defining form content.__

* Originally we used XML to define the content of our forms (or _workbooks_ as they became known).
From there it was a relatively simple process to write a renderer to conjure appropriate UIs from those definitions.
Over the intervening years we have defined some 50 workbooks in XML to collect over 3 million documents and we've extended our [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) to support growing business need.

* We're now actively working on our third-generation view rendering engine.
While designing the accompanying backend, we've found great benefit in aligning to open standards (for example our workflow is now defined in [Amazon State Language](https://states-language.net/spec.html)).

* Given our positive experiences of declarative techniques and open standards, it was a natural evolution for our new declarative-UI engine to incorporate an open standard.
We therefore prototyped using a few projects (for example [Schema Form](https://json-schema-form.github.io/angular-schema-form/)) and shipped our [MVP](https://en.wikipedia.org/wiki/Minimum_viable_product) using [Mozilla React Schema Form](https://mozilla-services.github.io/react-jsonschema-form).

__They're great libraries and helped us get up-and-running quickly.__

In hindsight, both these specifications are restricted by being bound to an underlying UI technology (i.e. Angular and React respectively).
Both projects mandate a traditional web-form interface too. What if we're only working in a CLI context, or want to try some voice-interface technology? And what if we wanted to define dashboards and similar read-only content?

* React Schema Form and Schema.io work well for reasonably trivial UI content, but start adding requirements for expression-based conditionality/validation, different layout structures, differing online/offline behaviours etc. and we were soon "working against" both approaches - even to deliver quite basic experiences.

To compound matters, the underlying use of [JSON Schema](http://json-schema.org/) involves a lot of duplication and arbitrary splitting between model and UI definitions: which soon builds friction when describing larger UIs.
In turn, we found this complexity bleeds into tooling and the wider architecture.

__So with a shopping-list in-hand:__

1. Must be an open standard and encourage contributions
2. Must be easily extended to include new capabilities
3. Must not be tied to any particular frontend technology or project
4. Must not be tied to a particular UI pattern
5. Must use a standard expression language (strong preference towards Javascript)
6. Must support complex validation expressions
7. Must support dynamic show/hide expressions (with optimisation for large chunks of the view)
8. Must support online/offline behaviours
9. Must have a schema to validate declarations and support tooling
10. Must have an open SDK or similar to assist implementation
11. Must be well documented
12. Must have minimum of friction for embedding in a variety of app styles
12. Strong preference towards JSON-based languages

__...we went looking for an open standard capable of replacing our existing library of XML-defined views (some of which are pretty hefty in terms of number of components and logic).__

__Spoiler:__ We couldn't find one. Which was disappointing (and unexpected), because the experience of adopting [Amazon State Language](https://states-language.net/spec.html) had been great.
We were edging closer to defining our own, but at the same time very mindful of this sort of thing:

![How standards proliferate Licensed under CC BY-NC 2.5 by xkcd.com](https://imgs.xkcd.com/comics/standards.png)

* A particularity bad smell came about when we developed a simple intermediary format (to ease tooling complexity and authoring processes) which we could translate back into React Schema Form definitions.
It was becoming evident we didn't have a good fit for what we wanted to do, and that using a badly-fitting standard is actually worse than not using a standard at all.

* The XML used in our outgoing generation had some problems: requiring it's own expression-language was a particular mis-step and XML feels ancient if used directly on the client app (especially in [Single Page Applications](https://en.wikipedia.org/wiki/Single-page_application) and [Progressive Web Apps](https://en.wikipedia.org/wiki/Progressive_Web_Apps) contexts).

### So... __Cardscript__!

* __It does all the things _we_ need, and we think it might be useful to other organisations if it became a standard.__

## <a name="utilities"></a>Appendix B: Cardscript Utilities

__Here are some [Node.js](https://nodejs.org/en/)-based utilities to help working with Cardscript:__
